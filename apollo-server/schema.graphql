# Included scalars
scalar JSON
scalar Upload

# It will increment!
type Counter {
  # Number of increments
  count: Int!
  # Full message for testing
  countStr: String
}

# A text message send by users
type Message {
  id: ID!
  # Message content
  text: String!
}

# Input from user to create a message
input MessageInput {
  # Message content
  text: String!
}

type File {
  id: ID!
  path: String!
  filename: String!
  mimetype: String!
  encoding: String!
}

enum ModuleTypes {
  moduleCreating
  moduleProgressMe
}

type Module {
  id: ID!
  type: String
  title: String
  selfQuestion: String
}

type ModuleItems {
  name: String
  valType: String
  belong: ID!
  redirect: ModuleTypes
}

type ModuleCreating {
  folder: String
  repo: String
  desc: String
  skills: [String]
}
type ModuleProgressMe {
  type: String
  name: String
  keys: [String]
}

type Query {
  # Test query with a parameter
  hello(name: String): String!
  # List of messages sent by users
  messages: [Message]
  uploads: [File]
  modules: [Module]
  moduleItems(belong: ID!): [ModuleItems]
  moduleCreatings: [ModuleCreating]
  moduleProgressMes: [ModuleProgressMe]
}

type Mutation {
  myMutation: String!
  # Add a message and publish it on 'messages' subscription channel
  addMessage(input: MessageInput!): Message!
  singleUpload(file: Upload!): File!
  multipleUpload(files: [Upload!]!): [File!]!
}

type Subscription {
  mySub: String!
  # This will update every 2 seconds
  counter: Counter!
  # When a new message is added
  messageAdded: Message!
}
